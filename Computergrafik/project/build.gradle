import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

// Git magic to get the actual version
def getVersionFromGit = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def stderr = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
            errorOutput = stderr
        }
        return stdout.toString().trim().replaceFirst("-", ".")
    } catch (ignored) {

        // create snapshot version with current timestamp
        return "SNAPSHOT-" + (OffsetDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")))
    }
}
final currentVersion = getVersionFromGit()


group 'de.haw'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
mainClassName = 'de.haw.project.App'

version = currentVersion

// enable warnings, etc
def compilerFlags = ["-Xlint:all", "-deprecation"]
compileJava {
    options.compilerArgs += compilerFlags
}
compileTestJava {
    options.compilerArgs += compilerFlags
}

// dependency repos
repositories {
    mavenCentral()
}

// source sets
sourceSets {
    generated {
        java {
            srcDirs = ["$buildDir/generated-src/generated"]
        }
        resources {
            srcDirs = ["$buildDir/generated-src/resources"]
        }
    }
}

// specify global dependencies
dependencies {

    // Logging API (we don't need logback during compile time)
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.8'

    // Idea type annotations
    compile group: 'org.jetbrains', name: 'annotations', version: '15.0'

    // source sets
    compile sourceSets.generated.output
}

// version info task
task createVersionInfo {
    doLast {
        def versionInfoDir = new File("${sourceSets.generated.java.srcDirs.find()}/de/haw")
        versionInfoDir.mkdirs()
        def versionInfoFile = new File(versionInfoDir, "VersionInfo.java")
        versionInfoFile.createNewFile()
        versionInfoFile.text = """\
package de.haw;

import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

public abstract class VersionInfo {

    public static final String VERSION = "${currentVersion}";

    public static final ZonedDateTime BUILD_TIME = ZonedDateTime.parse("${ZonedDateTime.now(ZoneOffset.UTC)}");
}
"""
    }
    compileGeneratedJava.dependsOn createVersionInfo
}